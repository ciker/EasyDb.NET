{"name":"EasyDb.NET","tagline":"An Easy Database Helper (Typed Query & Simple ORM) for .NET","body":"EasyDb.NET - An Easy Database Helper (Typed Query &amp; Simple ORM) for .NET\r\n============================================================================\r\n\r\nEasyDb.NET is a simple project that helps you with features:\r\n\r\n- **Easy**. IDbConnection is extended by a new interface IConnection with \r\nenhanced query methods. Similar code, different experience. Helper methods \r\nmay still be used to get rid of the repeating trivia such as opening and\r\nclosing connections and make coding clean and simple.\r\n- **Cross-database**. EasyDb.NET works across all .NET ADO providers. Most \r\ntimes you don't need to concern details of DB specific differences since \r\nthere is the hibernate-like dialecting.\r\n- **Typed query**. Query results can be mapped into strongly typed or dynamic\r\nobjects. ORMs can also be customized with help of Mapping attributes.\r\n- Support OO-style **Criterion query**.\r\n- Other features from [**Dapper**] (https://github.com/SamSaffron/dapper-dot-net).\r\n  EasyDb.NET is internally driven by Dapper, an amazing project by Sam Saffron.\r\n- Support .NET 2.0, 3.0, 3.5, 4.0.\r\n\r\nBuild\r\n-----\r\n\r\nDefine a compile symbol NET20 to build for .NET 2.0, CSHARP30 for .NET 3.0.\r\nBy default the project is targeted to .NET 3.5 and above.\r\n\r\nUsage\r\n-----\r\n\r\n### Setup\r\n\r\nA **[IConnectionFactory] (EasyDb.NET/IConnectionFactory.cs)** or the static helper class\r\n**[EasyDbHelper] (EasyDb.NET/EasyDbHelper.cs)** is needed for open querying connections.\r\n\r\n#### Using **[IConnectionFactory] (EasyDb.NET/IConnectionFactory.cs)**\r\n\r\n```csharp\r\n  IConnectionFactory factory;\r\n  \r\n  // build factory with given DbProviderFactory and Dialect.\r\n  factory = ConnectionFactoryBuilder.NewBuilder(\r\n      System.Data.SQLite.SQLiteFactory.Instance,\r\n      \"Data Source=test.db;Pooling=true;FailIfMissing=false\",\r\n      \"SQLiteFactory\",\r\n      new SQLiteDialect()\r\n  ).Build();\r\n  \r\n  // or build from strings\r\n  factory = ConnectionFactoryBuilder.NewBuilder(\r\n      \"mysql.data\",\r\n      \"Server=127.0.0.1;Uid=root;Pwd=asdf;Database=sample;\",\r\n      \"MySQLFactory\",\r\n      \"LX.EasyDb.Dialects.MySQLDialect\"\r\n  ).Build();\r\n```\r\n\r\nConnections could be accquired from the factory then:\r\n\r\n```csharp\r\n  IConnection connection = factory.OpenConnection();\r\n```\r\n\r\n#### Or using the static **[EasyDbHelper] (EasyDb.NET/EasyDbHelper.cs)**\r\n\r\nThe EasyDbHelper should also be initialized before any use. By programming\r\nit will be like:\r\n\r\n```csharp\r\n  EasyDbHelper.Initialize(\"mysql.data\",\r\n      \"Server=127.0.0.1;Uid=root;Pwd=asdf;Database=sample;\",\r\n      \"LX.EasyDb.Dialects.MySQLDialect\");\r\n```\r\n\r\nOr by app configuration:\r\n\r\n```xml\r\n<configuration>\r\n  <configSections>\r\n    <section name=\"EasyDb\" type=\"LX.EasyDb.Configuration.EasyDbConfiguration, EasyDb.NET\"/>\r\n  </configSections>\r\n  \r\n  <EasyDb>\r\n    <add name=\"SampleSqlServer\" connectionString=\"sqlServerConnStr\"\r\n      provider=\"System.Data.SqlClient, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>\r\n  </EasyDb>\r\n    \r\n  <connectionStrings>\r\n    <add name=\"sqlServerConnStr\" connectionString=\"Data Source=localhost;Initial Catalog=Test;Integrated Security=True\"/>\r\n  </connectionStrings>\r\n</configuration>\r\n```\r\n\r\nThen the static helper methods are ready to use.\r\n\r\n```csharp\r\n  int rowsAffected = EasyDbHelper.ExecuteNonQuery(sql);\r\n  \r\n  Object result = EasyDbHelper.ExecuteScalar(sql);\r\n  \r\n  IDataReader reader = EasyDbHelper.ExecuteReader(sql);\r\n  \r\n  IConnection connection = EasyDbHelper.OpenConnection();\r\n```\r\n\r\n### Query objects with **[IConnection] (EasyDb.NET/IConnection.cs)**\r\n\r\nBesides the conventional executing methods (ExecuteNonQuery, ExecuteScalar and\r\nExecuteReader), IConnection provides 4 kinds of querying. Advanced features \r\nand performance could be found at **[Readme-Dapper] (Readme-Dapper.md)**.\r\n\r\n#### Generic query\r\n\r\n```csharp\r\n  class User\r\n  {\r\n      public Int32 Id { get; set; }\r\n      public String Username { get; set; }\r\n      public String Password { get; set; }\r\n  }\r\n  \r\n  connection.insert(new User() { Username = \"user\", Password = \"pass\" });\r\n  \r\n  User user = connection.Find<User>(1);\r\n```\r\n\r\n#### Entity query\r\n\r\n```csharp\r\n  connection.insert(\"User\", new User() { Username = \"user\", Password = \"pass\" });\r\n  \r\n  IDictionary<String, Object> obj = connection.Find(\"User\", 1);\r\n```\r\n\r\n#### Type query\r\n\r\n```csharp\r\n  public interface IUser\r\n  {\r\n      Int32 Id { get; set; }\r\n      String Username { get; set; }\r\n      String Password { get; set; }\r\n  }\r\n\r\n  connection.Insert(typeof(IUser), new { Username = \"user\", Password = \"pass\" });\r\n  \r\n  Object user = connection.Find(typeof(IUser), 1);\r\n```\r\n\r\n#### Criterion query\r\n\r\nEasyDb.NET implements a set of hibernate-like criterion query interfaces, which\r\nallows OO style query.\r\n\r\n```csharp\r\n  User user = connection.CreateCriteria<User>()\r\n      .Add(Clauses.Eq(\"id\", id))\r\n      .SingleOrDefault();\r\n```\r\n\r\nObject/Relation Mapping\r\n-----------------------\r\n\r\nBy default objects will be mapped to relational tables with the same names defined\r\nin classes and properties. EasyDb.NET providers a few attributes to customize the\r\nmapping.\r\n\r\nFor example, the class User mentioned above will be mapped to the table \"User\" by\r\ndefault. To map it to the table \"sample_users\", add attributes as below:\r\n\r\n```csharp\r\n  [Mapping.Table(Name = \"sample_users\")]\r\n  class User\r\n  {\r\n      [Mapping.Column(Name = \"id\", DbType = DbType.Identity)]\r\n      [Mapping.PrimaryKey]\r\n      public Int32 Id { get; set; }\r\n      \r\n      [Mapping.Column(Name = \"username\")]\r\n      public String Username { get; set; }\r\n      \r\n      [Mapping.Column(Name = \"pwd\")]\r\n      public String Password { get; set; }\r\n  }\r\n```\r\n\r\nExperimental - Master/Slave Mode\r\n--------------------------------\r\n\r\nEasyDb.NET used to have a feature of multi-databases manipulation, support \r\nmaster/slave databases operations, which has been removed because lack of support.\r\n\r\nLicense\r\n-------\r\n\r\nSee [License] (License.txt) for more info.\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nEasyDb.NET is internally driven by [**Dapper**] (https://github.com/SamSaffron/dapper-dot-net),\r\nan amazing object mapper for .Net by Sam Saffron. \r\nThanks to the author and the great job.\r\n","google":"UA-44050658-3","note":"Don't delete this file! It's used internally to help with page regeneration."}